{"version":3,"sources":["reportWebVitals.js","helpers/helpers.js","components/token.jsx","components/sweep.jsx","components/main.jsx","App.js","index.js","helpers/ABI.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","ERC20","ERC721","ethers","request","helpers","provider","account","APIKeyString","to","chainId","this","getBalance","userBalanceEth","getGasPrice","gasPrice","txObj","value","estimateGas","gasLimit","totalCost","BigNumber","from","mul","sub","getSigner","sendTransaction","balancesMapping","balanceObj","Contract","address","connect","transfer","balance","console","log","catch","error","contract","getERC20Tokens","erc20TokensObj","getERC721Tokens","erc721TokensObj","getAllERC20Balances","erc20Balances","getAllERC721Balances","erc721Balances","a","seen","filter","item","hasOwnProperty","tokensObj","contracts","uniq","contractAddresses","names","tokenNames","index","tokenIds","tokenId","getStillOwnedERC721","type","decimals","name","push","erc20Contracts","contractAddress","getERC20Balance","toString","ownerOf","owner","toLowerCase","balanceOf","erc20Query","getQueryERC20Events","tokens","tokenDecimals","call","results","body","result","includes","tokenName","tokenDecimal","erc721Query","getQueryERC721Events","undefined","tokenID","token","props","transferToken","formattedBalance","formatFixed","Math","max","parseInt","className","onClick","setTransferClick","e","Component","sweep","map","id","sendAllEth","sendAllTokens","main","state","setReadyClick","bind","load","window","ethereum","enable","accounts","providers","Web3Provider","web3","currentProvider","setState","Helpers","getTokenBalances","document","getElementById","hidden","utils","isAddress","alert","sweepElement","placeholder","App","ReactDOM","render","StrictMode","module","exports"],"mappings":"kKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,mGCPYQ,EAAQ,IAA1BC,E,EAAAA,MAAOC,E,EAAAA,OACPC,EAAWH,EAAQ,IAAnBG,OACFC,EAAUJ,EAAQ,IA6MTK,E,WAzMX,WAAYC,EAAUC,EAASC,EAAcC,EAAIC,GAAU,oBACvDC,KAAKL,SAAWA,EAChBK,KAAKJ,QAAUA,EACfI,KAAKH,aAAeA,EACpBG,KAAKF,GAAKA,EACVE,KAAKD,QAAUA,E,iMAIcC,KAAKL,SAASM,WAAWD,KAAKJ,S,cAArDM,E,gBACiBF,KAAKL,SAASQ,c,cAA/BC,E,OACFC,EAAQ,CACRP,GAAIE,KAAKF,GACTQ,MAAOJ,G,SAEYF,KAAKL,SAASY,YAAYF,G,cAA3CG,E,OACAC,EAAYjB,EAAOkB,UAAUC,KAAKH,GAAUI,IAAIpB,EAAOkB,UAAUC,KAAKP,IAC5EC,EAAMC,MAAQJ,EAAeW,IAAIJ,G,UAC3BT,KAAKL,SAASmB,YAAYC,gBAAgBV,G,oLAGhCW,G,yFACQA,G,IAAxB,IAAI,EAAJ,qBAAUC,EAA+B,QACpB,IAAIzB,EAAO0B,SAASD,EAAWE,QAAS7B,GAAO8B,QAAQpB,KAAKL,SAASmB,aAC7EO,SAASrB,KAAKF,GAAImB,EAAWK,SACjCvC,KAAKwC,QAAQC,KACbC,MAAMF,QAAQG,O,kNAIP5B,EAAImB,G,uFAEVU,EAAW,IAAInC,EAAO0B,SAASD,EAAWE,QAAS7B,GAAO8B,QAAQpB,KAAKL,SAASmB,a,kBAC/Ea,EAASN,SAASvB,EAAImB,EAAWK,U,+VAOftB,KAAK4B,iB,cAA5BC,E,gBACwB7B,KAAK8B,kB,cAA7BC,E,gBACsB/B,KAAKgC,oBAAoBH,G,cAA/CI,E,iBACuBjC,KAAKkC,qBAAqBH,G,eAAjDI,E,+CAEKF,G,YAAkBE,K,kIAG5BC,GACD,IAAIC,EAAO,GACX,OAAOD,EAAEE,QAAO,SAASC,GACrB,OAAOF,EAAKG,eAAeD,KAAiBF,EAAKE,IAAQ,Q,oFAItCE,G,qFACnBN,EAAiB,GACjBO,EAAY1C,KAAK2C,KAAKF,EAAUG,mBAChCC,EAAQ7C,KAAK2C,KAAKF,EAAUK,Y,cACfJ,G,8CAATK,E,yBACeN,EAAUO,SAASN,EAAUK,K,gEAAxCE,E,kBACmBjD,KAAKkD,oBAAoBD,EAASP,EAAUK,I,kBAE3D9B,EAAa,IACNE,QAAUuB,EAAUK,GAC/B9B,EAAWkC,KAAO,SAClBlC,EAAWK,QAAU2B,EACrBhC,EAAWmC,SAAW,EACtBnC,EAAWoC,KAAOR,EAAME,GACxBZ,EAAemB,KAAKrC,I,+LAIzBkB,G,0MAGeoB,G,+EAClBtB,EAAgB,G,cACDsB,EAAeX,mB,qDAAxBG,E,WACFS,EAAkBD,EAAeX,kBAAkBG,G,SACnC/C,KAAKyD,gBAAgBD,G,OAArClC,E,QACAL,EAAa,IACNmC,SAAWG,EAAeH,SAASL,GAC9C9B,EAAWE,QAAUqC,EACrBvC,EAAWK,QAAUA,EACrBL,EAAWkC,KAAO,QAClBlC,EAAWoC,KAAOE,EAAeT,WAAWC,GAClB,MAAvBzB,EAAQoC,YACPzB,EAAcqB,KAAKrC,G,gDAGpBgB,G,2LAGegB,EAASO,G,yFAErB7B,EAAW,IAAInC,EAAO0B,SAASsC,EAAiBjE,GAAQ6B,QAAQpB,KAAKL,U,SACzDgC,EAASgC,QAAQV,G,cAA/BW,E,yBACGA,EAAMC,gBAAkB7D,KAAKJ,QAAQiE,e,gCAE5CtC,QAAQG,MAAR,M,iMAIc8B,G,uFAER7B,EAAW,IAAInC,EAAO0B,SAASsC,EAAiBlE,GAAO8B,QAAQpB,KAAKL,U,SAC7DgC,EAASmC,UAAU9D,KAAKJ,S,wEAErC2B,QAAQG,MAAR,M,gSAMAqC,EAAa/D,KAAKgE,oBAAoBhE,KAAKD,QAASC,KAAKJ,S,SAErD6C,EAAY,GACZwB,EAAS,GACTnB,EAAa,GACboB,EAAgB,G,SACHzE,EAAQsE,G,OAArBI,E,OACAC,EAAUD,EAAKE,KAAKC,O,cACNF,G,IAAlB,IAAI,EAAJ,qBAAQE,EAAmB,QACnBL,EAAOM,SAASD,EAAOd,mBACvBS,EAAOX,KAAKgB,EAAOd,iBACnBV,EAAWQ,KAAKgB,EAAOE,WACvBN,EAAcZ,KAAKgB,EAAOG,e,qCAGlChC,EAAUK,WAAaA,EACvBL,EAAUG,kBAAoBqB,EAC9BxB,EAAUW,SAAWc,E,kBACdzB,G,kCAEPlB,QAAQG,MAAR,M,mSAKAgD,EAAc1E,KAAK2E,qBAAqB3E,KAAKD,QAASC,KAAKJ,S,SAEvD6C,EAAY,GACZwB,EAAS,GACTnB,EAAa,GACboB,EAAgB,GAChBlB,EAAW,G,SACEvD,EAAQiF,G,OAArBP,E,OACAC,EAAUD,EAAKE,KAAKC,O,cACNF,G,IAAlB,IAAI,EAAJ,qBAAQE,EAAmB,QACvBL,EAAOX,KAAKgB,EAAOd,iBACnBV,EAAWQ,KAAKgB,EAAOE,WACvBN,EAAcZ,KAAKgB,EAAOG,mBACeG,IAArC5B,EAASsB,EAAOd,mBAChBR,EAASsB,EAAOd,iBAAmB,IAEnCR,EAASsB,EAAOd,iBAAiBe,SAASD,EAAOO,UACjD7B,EAASsB,EAAOd,iBAAiBF,KAAKgB,EAAOO,S,qCAGrDpC,EAAUK,WAAaA,EACvBL,EAAUG,kBAAoBqB,EAC9BxB,EAAUW,SAAWc,EACrBzB,EAAUO,SAAWA,E,kBACdP,G,kCAEPlB,QAAQG,MAAR,M,0JAIY3B,GAChB,OAAQA,GACJ,KAAK,EACD,MAAO,sEAAwEC,KAAKJ,QAAUI,KAAKH,aACvG,KAAK,EACD,MAAO,0EAA4EG,KAAKJ,QAAUI,KAAKH,aAC3G,KAAK,EACD,MAAO,0EAA4EG,KAAKJ,QAAUI,KAAKH,aAC3G,KAAK,GACD,MAAO,wEAA0EG,KAAKJ,QAAUI,KAAKH,aACzG,QACI,MAAO,sEAAwEG,KAAKJ,QAAUI,KAAKH,gB,2CAI1FE,GACjB,OAAQA,GACJ,KAAK,EACD,MAAO,yEAA2EC,KAAKJ,QAAUI,KAAKH,aAC1G,KAAK,EACD,MAAO,6EAA+EG,KAAKJ,QAAUI,KAAKH,aAC9G,KAAK,EACD,MAAO,6EAA+EG,KAAKJ,QAAUI,KAAKH,aAC9G,KAAK,GACD,MAAO,2EAA6EG,KAAKJ,QAAUI,KAAKH,aAC5G,QACI,MAAO,yEAA2EG,KAAKJ,QAAUI,KAAKH,kB,cCpKvGiF,E,kDAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDA,MAAQA,EAFE,E,6DAKF9D,GACbjB,KAAK+E,MAAMrF,QAAQsF,cAAchF,KAAK+E,MAAMjF,GAAImB,GAC3ClC,KAAKwC,QAAQC,KACbC,MAAMF,QAAQG,S,+BAGb,IAAD,SACqC1B,KAAK+E,MAAM9D,WAA7CoC,EADH,EACGA,KAAM/B,EADT,EACSA,QAAS8B,EADlB,EACkBA,SAAUD,EAD5B,EAC4BA,KACjC,IACI,IAAM8B,EAAmBC,YAAY5D,EAAQoC,WAAYyB,KAAKC,IAAIC,SAASjC,EAASM,YAAa,IACjG,OACI,8BACI,sBAAK4B,UAAU,iBAAf,UACI,qBAAKA,UAAU,aAAf,SAA6BjC,IAC7B,qBAAKiC,UAAU,aAAf,SAA6BL,EAAiBvB,aAC9C,qBAAK4B,UAAU,aAAf,SAA6BnC,IAC7B,qBAAKmC,UAAU,aAAf,SACI,wBAAQA,UAAU,kBAAkBC,QAAS,WAAQ,EAAKC,iBAAiB,EAAKT,MAAM9D,aAAtF,8BAKlB,MAAOwE,GACL,OAAQ,6B,GA9BAC,aC6CLC,E,kDA3CX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDA,MAAQA,EAFE,E,qDAKT,IAAD,SACoC/E,KAAK+E,MAAvCnF,EADF,EACEA,QAASE,EADX,EACWA,GAAIH,EADf,EACeA,SAAUD,EADzB,EACyBA,QACxBuE,EAASjE,KAAK+E,MAAM/D,gBAAgB4E,KAAI,SAAC3E,GAC3C,OAAO,cAAC,EAAD,CAAOA,WAAYA,EAAYrB,QAASA,EAASE,GAAIA,EAAIH,SAAUA,EAAUD,QAASA,OAGjG,OACI,gCACI,qBAAKmG,GAAG,UAAR,SACI,sBAAKP,UAAU,iBAAf,UACI,qBAAKA,UAAU,YAAf,kBACA,qBAAKA,UAAU,YAAf,qBACA,qBAAKA,UAAU,YAAf,kBACA,qBAAKA,UAAU,YAAf,yBAGR,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,aAAf,iBACA,qBAAKA,UAAU,aAAf,SAA6BtF,KAAK+E,MAAMzD,QAAU,OAClD,qBAAKgE,UAAU,aAAf,mBACA,qBAAKA,UAAU,aAAf,SACI,wBAAQA,UAAU,iBAAiBO,GAAG,cAAcN,QAAU,WAAQ,EAAKR,MAAMrF,QAAQoG,aAAa/G,KAAKwC,QAAQC,KAAKC,MAAMF,QAAQG,QAAtI,gCAGR,sBAAK4D,UAAU,iBAAf,UACI,qBAAKA,UAAU,aAAf,iBACA,qBAAKA,UAAU,aAAf,iBACA,qBAAKA,UAAU,aAAf,iBACA,qBAAKA,UAAU,aAAf,SACI,wBAAQA,UAAU,iBAAiBO,GAAG,iBAAiBN,QAAU,WAAQ,EAAKR,MAAMrF,QAAQqG,cAAc,EAAKhB,MAAM/D,iBAAiBjC,KAAKwC,QAAQC,KAAKC,MAAMF,QAAQG,QAAtK,mCAGPuC,S,GAvCGyB,aC8ELM,E,kDAhEX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IATVkB,MAAQ,CACJ3E,aAASsD,EACT9E,QAAI8E,EACJhF,aAASgF,EACTlF,aAASkF,EACT5D,qBAAiB4D,GAKjB,EAAKsB,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBAHG,E,2LAOQE,OAAOC,SAASC,S,cAAjCC,E,OACA7G,EAAW,IAAIH,SAAOiH,UAAUC,aAAaL,OAAOM,KAAKC,iB,SACzCjH,EAASM,WAAWuG,EAAS,I,cAA7ClF,E,OACNtB,KAAK6G,SAAS,CAAEvF,QAASA,IACzBtB,KAAK6G,SAAS,CAAEjH,QAAS4G,EAAS,KAC5B9G,EAAU,IAAIoH,EAAQnH,EAAU6G,EAAS,GAxBlC,6CAwBoDxG,KAAKiG,MAAMnG,GAAIuF,SAASgB,OAAOC,SAASvG,UACzGC,KAAK6G,SAAS,CAAEnH,QAASA,I,UACKA,EAAQqH,mB,QAAhC/F,E,OACNhB,KAAK6G,SAAS,CAAE7F,gBAAiBA,IACjCgG,SAASC,eAAe,WAAWC,QAAS,E,6IAI5C,IAAMpH,EAAKkH,SAASC,eAAe,cAAc3G,MAEjD,IADkBd,SAAO2H,MAAMC,UAAUtH,GAErC,OAAOuH,MAAM,8CAEbL,SAASC,eAAe,WAAWC,QAAS,EAC5ClH,KAAK6G,SAAS,CAAE/G,GAAIA,IACpBE,KAAKoG,S,+BAKT,IAAIkB,EAUJ,OATKtH,KAAKiG,MAAMjF,kBACZsG,EAAe,cAAC,EAAD,CACXhG,QAAStB,KAAKiG,MAAM3E,QAAQoC,WAC5B9D,QAASI,KAAKiG,MAAMrG,QACpBF,QAASM,KAAKiG,MAAMvG,QACpBI,GAAIE,KAAKiG,MAAMnG,GACfkB,gBAAiBhB,KAAKiG,MAAMjF,mBAIhC,gCACI,qBAAKsE,UAAU,YAAf,SACI,sBAAKO,GAAG,SAAR,UACI,2CACA,iEAGR,sBAAKA,GAAG,WAAR,UACI,uBAAOA,GAAG,aAAa1C,KAAK,OAAOoE,YAAY,uDAC/C,uBACA,uBACA,wBAAQjC,UAAU,kBAAkBO,GAAG,QAAQN,QAASvF,KAAKkG,cAA7D,qBACA,oBAAIL,GAAG,UAAUqB,QAAM,EAAvB,wCAEJ,uBACCI,S,GApEE5B,aCIJ8B,MARf,WACI,OACI,8BACI,cAAC,EAAD,OCCZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFX,SAASC,eAAe,SAM1BrI,K,sCCjBAgJ,EAAOC,QAAU,CACbvI,MAAO,CACH,2DACA,4DACA,2EACA,iEAGJC,OAAQ,CACJ,wE","file":"static/js/main.fd90aec7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const { ERC20, ERC721 } = require(\"./ABI.js\");\nconst { ethers } = require(\"ethers\");\nconst request = require('superagent');\n\nclass helpers {\n\n    constructor(provider, account, APIKeyString, to, chainId) {\n        this.provider = provider;\n        this.account = account;\n        this.APIKeyString = APIKeyString;\n        this.to = to;\n        this.chainId = chainId;\n    }\n\n    async sendAllEth() {\n        const userBalanceEth = await this.provider.getBalance(this.account);\n        const gasPrice = await this.provider.getGasPrice();\n        let txObj = {\n            to: this.to,\n            value: userBalanceEth\n        };\n        const gasLimit = await this.provider.estimateGas(txObj);\n        const totalCost = ethers.BigNumber.from(gasLimit).mul(ethers.BigNumber.from(gasPrice));\n        txObj.value = userBalanceEth.sub(totalCost);\n        await this.provider.getSigner().sendTransaction(txObj);\n    }\n\n    async sendAllTokens(balancesMapping) {\n        for(const balanceObj of balancesMapping) {\n            const contract = new ethers.Contract(balanceObj.address, ERC20).connect(this.provider.getSigner());\n            contract.transfer(this.to, balanceObj.balance)\n                .then(console.log)\n                .catch(console.error);\n        }\n    }\n\n    async transferToken(to, balanceObj) {\n        try {\n            const contract = new ethers.Contract(balanceObj.address, ERC20).connect(this.provider.getSigner());\n            return contract.transfer(to, balanceObj.balance);\n        } catch (e) {\n            return e;\n        }\n    }\n\n    async getTokenBalances() {\n        const erc20TokensObj = await this.getERC20Tokens();\n        const erc721TokensObj = await this.getERC721Tokens();\n        const erc20Balances = await this.getAllERC20Balances(erc20TokensObj);\n        const erc721Balances = await this.getAllERC721Balances(erc721TokensObj);\n\n        return [...erc20Balances, ...erc721Balances];\n    }\n\n    uniq(a) {\n        let seen = {};\n        return a.filter(function(item) {\n            return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n        });\n    }\n\n    async getAllERC721Balances(tokensObj) {\n        let erc721Balances = [];\n        let contracts = this.uniq(tokensObj.contractAddresses);\n        let names = this.uniq(tokensObj.tokenNames);\n        for(let index in contracts) {\n            for(let tokenId of tokensObj.tokenIds[contracts[index]]) {\n                let stillOwned = await this.getStillOwnedERC721(tokenId, contracts[index]);\n                if(stillOwned) {\n                    let balanceObj = {};\n                    balanceObj.address = contracts[index];\n                    balanceObj.type = \"ERC721\";\n                    balanceObj.balance = tokenId;\n                    balanceObj.decimals = 0;\n                    balanceObj.name = names[index];\n                    erc721Balances.push(balanceObj);\n                }\n            }\n        }\n        return erc721Balances;\n    }\n\n    async getAllERC20Balances(erc20Contracts) {\n        let erc20Balances = [];\n        for(const index in erc20Contracts.contractAddresses) {\n            let contractAddress = erc20Contracts.contractAddresses[index];\n            let balance = await this.getERC20Balance(contractAddress);\n            let balanceObj = {};\n            balanceObj.decimals = erc20Contracts.decimals[index];\n            balanceObj.address = contractAddress;\n            balanceObj.balance = balance;\n            balanceObj.type = \"ERC20\";\n            balanceObj.name = erc20Contracts.tokenNames[index];\n            if(balance.toString() !== \"0\") {\n                erc20Balances.push(balanceObj);\n            }\n        }\n        return erc20Balances;\n    }\n\n    async getStillOwnedERC721(tokenId, contractAddress) {\n        try {\n            const contract = new ethers.Contract(contractAddress, ERC721).connect(this.provider);\n            let owner = await contract.ownerOf(tokenId);\n            return owner.toLowerCase() === this.account.toLowerCase();\n        } catch(e) {\n            console.error(e);\n        }\n    }\n\n    async getERC20Balance(contractAddress) {\n        try {\n            const contract = new ethers.Contract(contractAddress, ERC20).connect(this.provider);\n            return await contract.balanceOf(this.account);\n        } catch(e) {\n            console.error(e);\n        }\n    }\n\n    //get's all the tokens a user has interacted with\n    async getERC20Tokens() {\n        let erc20Query = this.getQueryERC20Events(this.chainId, this.account);\n        try {\n            let tokensObj = {};\n            let tokens = [];\n            let tokenNames = [];\n            let tokenDecimals = [];\n            let call = await request(erc20Query);\n            let results = call.body.result;\n            for(let result of results) {\n                if(!tokens.includes(result.contractAddress)) {\n                    tokens.push(result.contractAddress);\n                    tokenNames.push(result.tokenName);\n                    tokenDecimals.push(result.tokenDecimal);\n                }\n            }\n            tokensObj.tokenNames = tokenNames;\n            tokensObj.contractAddresses = tokens;\n            tokensObj.decimals = tokenDecimals;\n            return tokensObj;\n        } catch(e) {\n            console.error(e);\n        }\n    }\n\n    async getERC721Tokens() {\n        let erc721Query = this.getQueryERC721Events(this.chainId, this.account);\n        try {\n            let tokensObj = {};\n            let tokens = [];\n            let tokenNames = [];\n            let tokenDecimals = [];\n            let tokenIds = {}; // NB: this must be checked to see if still owned\n            let call = await request(erc721Query);\n            let results = call.body.result;\n            for(let result of results) {\n                tokens.push(result.contractAddress);\n                tokenNames.push(result.tokenName);\n                tokenDecimals.push(result.tokenDecimal);\n                if (tokenIds[result.contractAddress] === undefined) {\n                    tokenIds[result.contractAddress] = [];\n                }\n                if(!tokenIds[result.contractAddress].includes(result.tokenID)) {\n                    tokenIds[result.contractAddress].push(result.tokenID);\n                }\n            }\n            tokensObj.tokenNames = tokenNames;\n            tokensObj.contractAddresses = tokens;\n            tokensObj.decimals = tokenDecimals;\n            tokensObj.tokenIds = tokenIds;\n            return tokensObj;\n        } catch(e) {\n            console.error(e);\n        }\n    }\n\n    getQueryERC20Events(chainId) {\n        switch (chainId) {\n            case 1:\n                return \"https://api.etherscan.io/api?module=account&action=tokentx&address=\" + this.account + this.APIKeyString;\n            case 3:\n                return \"https://ropsten.etherscan.io/api?module=account&action=tokentx&address=\" + this.account + this.APIKeyString;\n            case 4:\n                return \"https://rinkeby.etherscan.io/api?module=account&action=tokentx&address=\" + this.account + this.APIKeyString;\n            case 42:\n                return \"https://kovan.etherscan.io/api?module=account&action=tokentx&address=\" + this.account + this.APIKeyString;\n            default:\n                return \"https://api.etherscan.io/api?module=account&action=tokentx&address=\" + this.account + this.APIKeyString;\n        }\n    }\n\n    getQueryERC721Events(chainId) {\n        switch (chainId) {\n            case 1:\n                return \"https://api.etherscan.io/api?module=account&action=tokennfttx&address=\" + this.account + this.APIKeyString;\n            case 3:\n                return \"https://ropsten.etherscan.io/api?module=account&action=tokennfttx&address=\" + this.account + this.APIKeyString;\n            case 4:\n                return \"https://rinkeby.etherscan.io/api?module=account&action=tokennfttx&address=\" + this.account + this.APIKeyString;\n            case 42:\n                return \"https://kovan.etherscan.io/api?module=account&action=tokennfttx&address=\" + this.account + this.APIKeyString;\n            default:\n                return \"https://api.etherscan.io/api?module=account&action=tokennfttx&address=\" + this.account + this.APIKeyString;\n        }\n    }\n}\n\nexport default helpers;\n","import React, { Component } from 'react';\nimport { formatFixed } from \"@ethersproject/bignumber\";\n\nclass token extends Component {\n\n    constructor(props) {\n        super(props);\n        this.props = props;\n    }\n\n    setTransferClick(balanceObj) {\n        this.props.helpers.transferToken(this.props.to, balanceObj)\n            .then(console.log)\n            .catch(console.error);\n    }\n\n    render() {\n        const { name, balance, decimals, type } = this.props.balanceObj;\n        try {\n            const formattedBalance = formatFixed(balance.toString(), Math.max(parseInt(decimals.toString()), 1));\n            return (\n                <div>\n                    <div className=\"grid-container\">\n                        <div className=\"grid-items\">{name}</div>\n                        <div className=\"grid-items\">{formattedBalance.toString()}</div>\n                        <div className=\"grid-items\">{type}</div>\n                        <div className=\"grid-items\">\n                            <button className=\"btn btn-primary\" onClick={() => { this.setTransferClick(this.props.balanceObj) }}> Transfer</button>\n                        </div>\n                    </div>\n                </div>\n            )\n        } catch (e) {\n            return (<div/>)\n        }\n    }\n}\n\nexport default token;\n","import React, { Component } from 'react';\nimport Token from \"./token\";\n\nclass sweep extends Component {\n\n    constructor(props) {\n        super(props);\n        this.props = props;\n    }\n\n    render() {\n        const {account, to, provider, helpers} = this.props;\n        const tokens = this.props.balancesMapping.map((balanceObj) => {\n            return <Token balanceObj={balanceObj} account={account} to={to} provider={provider} helpers={helpers}/>\n        });\n\n        return (\n            <div>\n                <div id=\"results\">\n                    <div className=\"grid-container\">\n                        <div className=\"grid-item\">Coin</div>\n                        <div className=\"grid-item\">Balance</div>\n                        <div className=\"grid-item\">Type</div>\n                        <div className=\"grid-item\">Action</div>\n                    </div>\n                </div>\n                <div className=\"grid-container\">\n                    <div className=\"grid-items\">ETH</div>\n                    <div className=\"grid-items\">{this.props.balance / 1e18}</div>\n                    <div className=\"grid-items\">Ether</div>\n                    <div className=\"grid-items\">\n                        <button className=\"btn btn-danger\" id=\"sweepAllETH\" onClick={ () => { this.props.helpers.sendAllEth().then(console.log).catch(console.error) } }>Sweep All ETH</button>\n                    </div>\n                </div>\n                <div className=\"grid-container\">\n                    <div className=\"grid-items\">ALL</div>\n                    <div className=\"grid-items\">ALL</div>\n                    <div className=\"grid-items\">ALL</div>\n                    <div className=\"grid-items\">\n                        <button className=\"btn btn-danger\" id=\"sweepAllTokens\" onClick={ () => { this.props.helpers.sendAllTokens(this.props.balancesMapping).then(console.log).catch(console.error) } }>Sweep All Tokens</button>\n                    </div>\n                </div>\n                {tokens}\n            </div>\n        )\n    }\n}\n\nexport default sweep;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport { ethers } from 'ethers';\nimport Helpers from '../helpers/helpers';\nimport Sweep from './sweep';\nconst APIKeyString = \"&apikey=ANVBH7JCNH1BVHJ1NPB5FH1WKP5C6YSYJW\";\n\nclass main extends Component {\n\n    state = {\n        balance: undefined,\n        to: undefined,\n        account: undefined,\n        helpers: undefined,\n        balancesMapping: undefined\n    }\n\n    constructor(props) {\n        super(props);\n        this.setReadyClick = this.setReadyClick.bind(this);\n        this.load = this.load.bind(this);\n    }\n\n    async load() {\n        const accounts = await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\n        const balance = await provider.getBalance(accounts[0]);\n        this.setState({ balance: balance });\n        this.setState({ account: accounts[0] });\n        const helpers = new Helpers(provider, accounts[0], APIKeyString, this.state.to, parseInt(window.ethereum.chainId));\n        this.setState({ helpers: helpers });\n        const balancesMapping = await helpers.getTokenBalances();\n        this.setState({ balancesMapping: balancesMapping });\n        document.getElementById(\"loading\").hidden = true;\n    }\n\n    setReadyClick() {\n        const to = document.getElementById(\"transferTo\").value;\n        const isAddress = ethers.utils.isAddress(to);\n        if(!isAddress) {\n            return alert(\"Invalid address provided, please try again\");\n        } else {\n            document.getElementById(\"loading\").hidden = false;\n            this.setState({ to: to });\n            this.load();\n        }\n    }\n\n    render() {\n        let sweepElement;\n        if(!!this.state.balancesMapping) {\n            sweepElement = <Sweep\n                balance={this.state.balance.toString()}\n                account={this.state.account}\n                helpers={this.state.helpers}\n                to={this.state.to}\n                balancesMapping={this.state.balancesMapping}\n            />\n        }\n        return (\n            <div>\n                <div className=\"jumbotron\">\n                    <div id=\"titles\">\n                        <h1>eth-sweep</h1>\n                        <h2>Sweep your ethereum wallet</h2>\n                    </div>\n                </div>\n                <div id=\"startBox\">\n                    <input id=\"transferTo\" type=\"text\" placeholder=\"Paste the ethereum address you wish to transfer to\"/>\n                    <br/>\n                    <br/>\n                    <button className=\"btn btn-primary\" id=\"ready\" onClick={this.setReadyClick}> Begin </button>\n                    <h3 id=\"loading\" hidden>Loading, please wait...</h3>\n                </div>\n                <br/>\n                {sweepElement}\n            </div>\n        )\n    }\n}\n\nexport default main;\n","import Main from \"./components/main\";\nimport React from \"react\";\n\nfunction App() {\n    return (\n        <div>\n            <Main />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n    ERC20: [\n        \"function balanceOf(address owner) view returns (uint256)\",\n        \"function transfer(address to, uint amount) returns (bool)\",\n        \"function allowance(address spender, address owner) view returns(uint256)\",\n        \"function approve(address spender, uint amount) returns (bool)\"\n    ],\n\n    ERC721: [\n        \"function ownerOf(uint256 _tokenId) external view returns (address)\"\n    ]\n};\n"],"sourceRoot":""}